unsigned numSMs = 46
unsigned numSubcorePerSM = 4
unsigned maxThreadsPerSM = 1536
unsigned maxCTAPerSM = 32
unsigned registerPerSM = 65536
double coreFreq = 1.5 // GHz

std::string wrapSchedulePolicy = gto // [gto: greedy then oldest | lrr: loosely round-robin]

// operation latency
unsigned intLatency = 2
unsigned fpLatency = 2
unsigned dpLatency = 64
unsigned sfuLatency = 21
unsigned specializedUnit1Latency = 4 // BRA 
unsigned specializedUnit2Latency = 200 // TEX
unsigned specializedUnit3Latency = 32 // TENSOR
unsigned specializedUnit4Latency = 4 // UDP
unsigned specializedUnit5Latency
unsigned specializedUnit6Latency
unsigned specializedUnit7Latency
unsigned specializedUnit8Latency

// operation initiation interval
unsigned intInitIntv = 2
unsigned fpInitIntv = 1
unsigned dpInitIntv = 64
unsigned sfuInitIntv = 8
unsigned specializedUnit1IntiIntv = 4 // BRA 
unsigned specializedUnit2IntiIntv = 4 // TEX
unsigned specializedUnit3IntiIntv = 32 // TENSOR
unsigned specializedUnit4IntiIntv = 1 // UDP
unsigned specializedUnit5IntiIntv
unsigned specializedUnit6IntiIntv
unsigned specializedUnit7IntiIntv
unsigned specializedUnit8IntiIntv

// static latency of pipeline stages. register file read, Bank, FU lane will be modeled separtely
unsigned computePipeline = 3
unsigned loadPipeline = 0
unsigned storePipeline = 4

unsigned operandCollectorQue = 8 // # of operand collector queue per SM
unsigned fuQue = 2 // # of queue per functional unitS

unsigned regFileReadThroughput = 2

// OpFUMap // Opcode to FU type mapping is hardcoded in interval_model.h targeting Turing for now

// L1 data cache
unsigned l1DLatency = 39
EWritePolicy l1DWritePolicy = 1 // WRITE_THROUGH
EWriteAllocatePolicy l1DWriteAllocatePolicy = 2 // LAZY_FETCH_ON_READ

unsigned l1DnSet = 4 // Total number of sets (in all banks)
unsigned l1DAssoc = 256 // For max L1D size 128KB // TODO: How to deal with unified cache? For Accel-sim L1D: Calculate max_assoc (multiplier) by unified cache size / original L1D cache size. Caculate shared mem requirement in shader_core_config::max_cta. shared memory size is written in SASS trace.
unsigned l1DLineSize = 128 // A line can be splited into multiple sectors
unsigned l1DnBank = 4 // Number of L1D banks where each bank has part of sets or sectors. Lines (or sectors) in a set cannot be accessed in parallel.
EHashFunction l1DBankHashFunction = 0 // LINEAR_SET_FUNCTION
unsigned l1DLog2BankInterleaveByte = 32 // Could be smaller than line size in sectored cache
unsigned nSectorPerLine = 4
unsigned nMSHR = 384 // Number of MSHR entries

unsigned sharedMemLatency = 29 // L1S
std::vector<unsigned> sharedMemSizeOption = {0, 8192, 16384, 32768, 65536, 102400} // Should be ascending order

unsigned L2Latency = 187
EWritePolicy L2WritePolicy = 0 // WRITE_BACK
EWriteAllocatePolicy L2WriteAllocatePolicy = 2 // LAZY_FETCH_ON_READ

// interconnect
double maxNoCBW = 1536 // max NoC bandwidth (GB/s) // std::min(memn, m_smn) * m_block_sz(32) * (m_config->icnt_freq(1500*10^6) / 1000000000)

// memory
unsigned dramLatency = 254
double maxDRAMBW = 448.064 // max DRAM bandwidth (GB/s) //  dramn * ndr * busW * m_config->dram_freq / 1000000000